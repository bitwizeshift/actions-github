name: Create pull request
description: |
  A composite action for creating a github pull request.
  This requires `pull-requests: write` permissions in order to work correctly.

inputs:
  head:
    required: true
    description: |
      The name of the branch where your changes are implemented.
      For cross-repository pull requests in the same network, namespace head
      with a user like this: username:branch
  base:
    required: false
    default: ""
    description: |
      The name of the branch you want the changes pulled into. This should be an
      existing branch on the current repository. You cannot submit a pull
      request to one repository that requests a merge to a base of another
      repository.
  title:
    required: true
    description: "The title to use for the issue"
  body:
    required: false
    default: ""
    description: "The body text of the github issue"
  labels:
    required: false
    default: ""
    description: "A list of labels to add, separated by newlines."
  assignees:
    required: false
    default: ""
    description: "A list of assignees to add, separated by newlines."
  head-repo:
    required: false
    default: ""
    description: |
      The name of the repository where the changes in the pull request were made.
      This field is required for cross-repository pull requests if both
      repositories are owned by the same organization.
  draft:
    required: false
    default: "false"
    description: |
      Indicates whether the pull request is a draft. See "Draft Pull Requests"
      in the GitHub Help documentation to learn more.
  issue:
    required: false
    default: "0"
    description: |
      An issue in the repository to convert to a pull request. The issue title,
      body, and comments will become the title, body, and comments on the new
      pull request. Required unless `title` is specified.
  maintainer-can-modify:
    required: false
    default: "true"
    description: |
      Indicates whether maintainers can modify the pull request.
  owner:
    required: false
    default: ""
    description: |
      The repository owner.
      If unspecified, this will default to the owner of the current repository.
  repo:
    required: false
    default: ""
    description: |
      The name of the repository.
      If unspecified, this will default to the current repository.
  github-token:
    required: false
    default: "${{ github.token }}"
    description: |
      The default token to use for this Git operation.
      If unspecified, this will default to `github.token`.
  retries:
    required: false
    default: "0"
    description: |
      The number of times to attempt to retry if this fails.
  retry-exempt-status-codes:
    required: false
    default: "400,401,403,404,422"
    description: |
      A list of error-codes that are exempt from being retried.
outputs:
  pull-number:
    value: ${{ steps.create.outputs.pull-number }}
    description: "The number of the created pull request number"
  pull-url:
    value: ${{ steps.create.outputs.pull-url }}
    description: "The HTTP URL of the newly created pull request"

runs:
  using: "composite"
  steps:
    - name: Create issue
      id: create
      uses: actions/github-script@v7
      env:
        PR_TITLE: ${{ inputs.title }}
        PR_BODY: ${{ inputs.body }}
      with:
        retries: ${{ inputs.retries }}
        retry-exempt-status-codes: ${{ inputs.retry-exempt-status-codes }}
        github-token: ${{ inputs.github-token }}
        script: |
          const { data: pull } = await github.rest.issues.create({
            owner: `${{ inputs.owner }}` || context.repo.owner,
            repo: `${{ inputs.repo }}` || context.repo.repo,
            labels: `${{ inputs.labels }}`.split(/[\n,]/).map(s => s.trim()).filter(s => s),
            assignees: `${{ inputs.assignees }}`.split(/[\n,]/).map(s => s.trim()).filter(s => s),
            title: process.env.PR_TITLE,
            body: process.env.PR_BODY,
            head: `${{ inputs.head }}`,
            base: `${{ inputs.base }}`,
            head_repo: `${{ inputs.head-repo}}` || undefined,
            draft: ${{ inputs.draft }},
            issue: ${{ inputs.issue }} || undefined,
            maintainer_can_modify: ${{ inputs.maintainer-can-modify }},
          })
          core.setOutput('pull-number', pull?.number)
          core.setOutput('pull-api-url', pull.url)
          core.setOutput('pull-url', pull.html_url)
          core.setOutput('assignees', pull?.assignees?.map(v => v.login))
          core.setOutput('assignees-count', pull?.assignees?.length)
          core.setOutput('user-reviewers', pull?.requested_reviewers?.map(v => v.login))
          core.setOutput('user-reviewers-count', pull?.requested_reviewers?.length)
          core.setOutput('team-reviewers', pull?.requested_teams?.map(v => v.login))
          core.setOutput('team-reviewers-count', pull?.requested_teams?.length)
          core.setOutput('labels', pull?.labels?.map(v => v.name))
          core.setOutput('labels-count', pull?.labels?.length)
          core.setOutput('title', pull?.title)
          core.setOutput('body', pull?.body)
          core.setOutput('state', pull?.state)
          core.setOutput('draft', pull?.draft)
          core.setOutput('merged', pull?.merged)
          core.setOutput('locked', pull?.locked)
          var timeFromNow = function(date) {
            const diff = Date.now() - date
            return {
              milliseconds : Math.floor(diff           ),
              seconds      : Math.floor(diff /     1000),
              minutes      : Math.floor(diff /    60000),
              hours        : Math.floor(diff /  3600000),
              days         : Math.floor(diff / 86400000)
            }
          }
          core.setOutput('time-since-create', timeFromNow(Date.parse(pull?.created_at)))
          core.setOutput('time-since-last-update', timeFromNow(Date.parse(pull?.updated_at)))
